package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"main/internal/config"
	coreconfig "main/tools/pkg/core_config"
	"mime/multipart"
	"net/http"
	"os"
	"os/exec"
	"path/filepath" // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	concurrencyLimit  = 10
	bothubApiURL      = "https://bothub.chat/api/v2/openai/v1/audio/transcriptions"
	defaultAudioModel = "whisper-1" // –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–∞–∫ –≤ –≤–∞—à–µ–º curl –ø—Ä–∏–º–µ—Ä–µ

	menuCommandRecognize = "üé§ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
	menuCommandInfo      = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
	menuCommandSettings  = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç API
type TranscriptionResponse struct {
	Text  string    `json:"text"` // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ "text"
	Error *struct { // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç API
		Message string `json:"message"`
		Type    string `json:"type"`
		Param   string `json:"param"`
		Code    string `json:"code"`
	} `json:"error,omitempty"`
}

func recognizeSpeech(audioFilePath string, cfg *config.Config) (string, error) {
	log.Printf("STT: Processing %s with Bothub API", audioFilePath)

	// 1. –û—Ç–∫—Ä—ã—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
	file, err := os.Open(audioFilePath)
	if err != nil {
		return "", fmt.Errorf("failed to open audio file %s: %w", audioFilePath, err)
	}
	defer file.Close()

	// 2. –°–æ–∑–¥–∞—Ç—å —Ç–µ–ª–æ multipart/form-data –∑–∞–ø—Ä–æ—Å–∞
	var requestBody bytes.Buffer
	multipartWriter := multipart.NewWriter(&requestBody)

	// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'file'
	fileWriter, err := multipartWriter.CreateFormFile("file", filepath.Base(audioFilePath))
	if err != nil {
		return "", fmt.Errorf("failed to create form file for %s: %w", audioFilePath, err)
	}
	_, err = io.Copy(fileWriter, file)
	if err != nil {
		return "", fmt.Errorf("failed to copy file content to multipart writer: %w", err)
	}

	// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'model'
	err = multipartWriter.WriteField("model", defaultAudioModel)
	if err != nil {
		return "", fmt.Errorf("failed to write model field to multipart writer: %w", err)
	}

	// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ multipart-—Ç–µ–ª–∞
	// –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π boundary
	err = multipartWriter.Close()
	if err != nil {
		return "", fmt.Errorf("failed to close multipart writer: %w", err)
	}

	// 3. –°–æ–∑–¥–∞—Ç—å HTTP POST –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", bothubApiURL, &requestBody)
	if err != nil {
		return "", fmt.Errorf("failed to create new HTTP request: %w", err)
	}

	// 4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("Authorization", "Bearer "+cfg.BothubApiToken)
	// Content-Type —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ multipartWriter'–æ–º, –≤–∫–ª—é—á–∞—è boundary
	req.Header.Set("Content-Type", multipartWriter.FormDataContentType())

	// 5. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to execute HTTP request to Bothub API: %w", err)
	}
	defer resp.Body.Close()

	// 6. –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	responseBodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response body from Bothub API: %w", err)
	}

	// 7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		log.Printf("Bothub API returned non-OK status: %s. Response: %s", resp.Status, string(responseBodyBytes))
		// –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ API –µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ JSON
		var errorResp TranscriptionResponse
		if json.Unmarshal(responseBodyBytes, &errorResp) == nil && errorResp.Error != nil {
			return "", fmt.Errorf("Bothub API error: %s (Type: %s, Code: %s, Param: %s), HTTP Status: %s",
				errorResp.Error.Message, errorResp.Error.Type, errorResp.Error.Code, errorResp.Error.Param, resp.Status)
		}
		return "", fmt.Errorf("Bothub API request failed with status %s and body: %s", resp.Status, string(responseBodyBytes))
	}

	// 8. –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
	var transcriptionResp TranscriptionResponse
	err = json.Unmarshal(responseBodyBytes, &transcriptionResp)
	if err != nil {
		return "", fmt.Errorf("failed to unmarshal JSON response from Bothub API (%s): %w. Response body: %s", resp.Status, err, string(responseBodyBytes))
	}

	if transcriptionResp.Text == "" && transcriptionResp.Error == nil {
		// –≠—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª–µ 'text' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ, –Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç
		log.Printf("Warning: Bothub API returned OK status but no text. Response: %s", string(responseBodyBytes))
		return "", fmt.Errorf("Bothub API returned no text in response. Response body: %s", string(responseBodyBytes))
	}
	if transcriptionResp.Error != nil {
		return "", fmt.Errorf("Bothub API returned an error in JSON response: %s (Type: %s)", transcriptionResp.Error.Message, transcriptionResp.Error.Type)
	}

	log.Printf("STT: Successfully recognized text: \"%s\"", transcriptionResp.Text)
	return transcriptionResp.Text, nil
}

func convertOgaToWav(ogaPath string, wavPath string) error {
	// ffmpeg -i input.oga -acodec pcm_s16le -ar 16000 -ac 1 output.wav
	cmd := exec.Command("ffmpeg", "-i", ogaPath, "-y", "-acodec", "pcm_s16le", "-ar", "16000", "-ac", "1", wavPath)
	output, err := cmd.CombinedOutput() // –ü–æ–ª—É—á–∞–µ–º –∏ stdout, –∏ stderr
	if err != nil {
		log.Printf("ffmpeg error for %s -> %s: %v\nOutput: %s", ogaPath, wavPath, err, string(output))
		return fmt.Errorf("ffmpeg conversion failed: %w. Output: %s", err, string(output))
	}
	log.Printf("Converted %s to %s", ogaPath, wavPath)
	return nil
}

func downloadFile(bot *tgbotapi.BotAPI, fileID string, localPath string) error {
	fileConfig := tgbotapi.FileConfig{FileID: fileID}
	file, err := bot.GetFile(fileConfig)
	if err != nil {
		return fmt.Errorf("bot.GetFile failed: %w", err)
	}
	url := file.Link(bot.Token)
	if url == "" && file.FilePath != "" {
		url = fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", bot.Token, file.FilePath)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
	client := &http.Client{
		Timeout: 30 * time.Second, // –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
		Transport: &http.Transport{
			TLSHandshakeTimeout:   10 * time.Second, // –¢–∞–π–º–∞—É—Ç –Ω–∞ TLS handshake
			ResponseHeaderTimeout: 10 * time.Second, // –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
			ExpectContinueTimeout: 1 * time.Second,
		},
	}
	resp, err := client.Get(url)
	if err != nil {
		return fmt.Errorf("http.Get failed for %s: %w", url, err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("bad status: %s, body: %s", resp.Status, string(bodyBytes))
	}
	out, err := os.Create(localPath)
	if err != nil {
		return fmt.Errorf("os.Create failed for %s: %w", localPath, err)
	}
	defer out.Close()
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return fmt.Errorf("io.Copy failed: %w", err)
	}
	log.Printf("Downloaded file %s to %s", fileID, localPath)

	return nil
}

func handleVoiceMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, cfg *config.Config) {
	voice := message.Voice
	chatID := message.Chat.ID

	log.Printf("[%s] (ChatID: %d) sent a voice message (FileID: %s, Duration: %d)",
		message.From.UserName, chatID, voice.FileID, voice.Duration)

	// 1. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è .oga
	ogaTempFile, err := os.CreateTemp("", "voice-*.oga")
	if err != nil {
		log.Printf("Error creating temp oga file: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ."))
		return
	}
	ogaFilePath := ogaTempFile.Name()
	ogaTempFile.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ downloadFile –∏ ffmpeg –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –µ–≥–æ —Å–∞–º–∏
	defer func() {
		log.Printf("Attempting to remove oga file: %s", ogaFilePath)
		if err := os.Remove(ogaFilePath); err != nil && !os.IsNotExist(err) {
			log.Printf("Error removing temp oga file %s: %v", ogaFilePath, err)
		}
	}()

	// 2. –°–∫–∞—á–∞—Ç—å .oga —Ñ–∞–π–ª
	err = downloadFile(bot, voice.FileID, ogaFilePath)
	if err != nil {
		log.Printf("Error downloading voice file (ID: %s): %v", voice.FileID, err)
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."))
		return
	}

	// 3. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è .wav
	wavTempFile, err := os.CreateTemp("", "voice-*.wav")
	if err != nil {
		log.Printf("Error creating temp wav file: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."))
		return
	}
	wavFilePath := wavTempFile.Name()
	wavTempFile.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
	defer func() {
		log.Printf("Attempting to remove wav file: %s", wavFilePath)
		if err := os.Remove(wavFilePath); err != nil && !os.IsNotExist(err) {
			log.Printf("Error removing temp wav file %s: %v", wavFilePath, err)
		}
	}()

	// 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WAV
	err = convertOgaToWav(ogaFilePath, wavFilePath)
	if err != nil {
		log.Printf("Error converting audio from %s to %s: %v", ogaFilePath, wavFilePath, err)
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ."))
		return
	}

	// 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ STT —Å–µ—Ä–≤–∏—Å
	recognizedText, err := recognizeSpeech(wavFilePath, cfg)
	if err != nil {
		log.Printf("Error recognizing speech for file %s: %v", wavFilePath, err)
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."))
		return
	}

	// 6. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(chatID, recognizedText)
	msg.ReplyToMessageID = message.MessageID
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending message to chat %d: %v", chatID, err)
	}
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow( // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
			tgbotapi.NewKeyboardButton(menuCommandRecognize),
			tgbotapi.NewKeyboardButton(menuCommandInfo),
		),
		tgbotapi.NewKeyboardButtonRow( // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
			tgbotapi.NewKeyboardButton(menuCommandSettings),
		),
	)
	// keyboard.OneTimeKeyboard = true // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
	keyboard.ResizeKeyboard = true // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏

	msg.ReplyMarkup = keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending main menu: %v", err)
	}
}

func main() {
	cfg := &config.Config{}
	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
	if err := coreconfig.Load(cfg, ""); err != nil {
		log.Panic("Can't load config file", err)
	}

	botToken := cfg.TelegramBotToken
	if botToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN environment variable not set")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal("NewBotAPI error: %v", err)
	}

	bot.Debug = true // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ false –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç (os.CreateTemp –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é)
	// tempDir := "./temp_audio"
	// if _, err := os.Stat(tempDir); os.IsNotExist(err) {
	// 	os.Mkdir(tempDir, 0755)
	// }

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	semaphore := make(chan struct{}, concurrencyLimit)

	for update := range updates {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö
		go func(currentUpdate tgbotapi.Update) {
			semaphore <- struct{}{}        // –ó–∞–Ω–∏–º–∞–µ–º —Å–ª–æ—Ç
			defer func() { <-semaphore }() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç

			message := currentUpdate.Message
			chatID := message.Chat.ID

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if message.IsCommand() {
				switch message.Command() {
				case "start", "menu":
					sendMainMenu(bot, chatID)
				default:
					msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.")
					bot.Send(msg)
				}
				return // –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ReplyKeyboard (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
			switch message.Text {
			case menuCommandRecognize:
				msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
				bot.Send(msg)
			case menuCommandInfo:
				msgText := "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.\n"
				msgText += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n"
				msgText += "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –æ—Ç bothub.chat (–Ω–∞ –±–∞–∑–µ OpenAI Whisper).\n"
				msgText += "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Pomogalov Vladimir\n"
				msgText += "–í–µ—Ä—Å–∏—è: 0.1.0"
				msg := tgbotapi.NewMessage(chatID, msgText)
				bot.Send(msg)
			case menuCommandSettings:
				msg := tgbotapi.NewMessage(chatID, "–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
				// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å InlineKeyboardMarkup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
				bot.Send(msg)
			default:
				// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –∏ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
				if message.Voice == nil && message.Text != "" {
					// –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ–Ω—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç
					msg := tgbotapi.NewMessage(chatID, "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ –º–µ–Ω—é?")
					msg.ReplyToMessageID = message.MessageID
					bot.Send(msg)
					sendMainMenu(bot, chatID) // –ò–ª–∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
					log.Printf("[%s] sent text: %s", message.From.UserName, message.Text)
				}
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if message.Voice != nil {
				handleVoiceMessage(bot, message, cfg)
			}

		}(update)
	}
}
